import logging
import os
import asyncio
import re
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ContentType
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import sys
from aiogram import F
from cities import CITIES
from config import YANDEX_API_KEY
from config import TOKEN

logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def on_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=TOKEN)
storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(storage=storage)  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ bot –≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ

geolocator = Nominatim(user_agent="geoapiExercises")

USER_DATA_FILE = "users.txt"

# States for profile creation
class ProfileForm(StatesGroup):
    age = State()
    name = State()
    city = State()
    update_name = State()
    update_age = State()
    update_city = State()
    update_description = State()
    update_media = State()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É, üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
def get_custom_keyboard(buttons):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=button)] for button in buttons],
        resize_keyboard=True
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–Ω–∫–µ—Ç—ã
def get_profile_choice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

# Main menu keyboard
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìú –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")]],
        resize_keyboard=True
    )

# City input keyboard
def get_city_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)],
            [KeyboardButton(text="üñä –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# Skip button keyboard
def get_skip_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ TXT
def load_users():
    users = {}
    if not os.path.exists(USER_DATA_FILE):
        return users

    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        for line in f:
            parts = line.strip().split(": ")
            if len(parts) == 2:
                user_id, data = parts
                user_id = int(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                age, name, city = data.split(" | ")
                users[user_id] = {"age": age, "name": name, "city": city}
    
    return users

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ TXT
def save_users(users):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        for user_id, data in users.items():
            f.write(f"{user_id}: {data['age']} | {data['name']} | {data['city']}\n")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
def save_user_data(user_id, age=None, name=None, city=None):
    users = load_users()

    if user_id in users:
        user_data = users[user_id]
    else:
        user_data = {"age": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "city": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    if age is not None:
        user_data["age"] = age
    if name is not None:
        user_data["name"] = name
    if city is not None:
        user_data["city"] = city

    users[user_id] = user_data
    save_users(users)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    users = load_users()
    return users.get(user_id, None)

# Start command handler
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({message.from_user.id}):", user_data)  # –û—Ç–ª–∞–¥–∫–∞
    
    if user_data and all(key in user_data for key in ["age", "name", "city"]):
        age = user_data.get("age", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        name = user_data.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        city = user_data.get("city", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        profile_text = f"üì∏ {name}, {age}, {city}"
        await message.answer(profile_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_custom_keyboard(["üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"])
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç!",
            reply_markup=get_main_keyboard()
        )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def update_profile(message: Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        await state.update_data(name=user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
        await state.update_data(age=user_data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
        await state.update_data(city=user_data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"))
    
    await message.answer("–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É! ‚úçÔ∏è")
    await ask_name(message, state)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã
@dp.message(lambda message: message.text == "üìú –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_new_profile(message: Message, state: FSMContext):
    await state.clear()
    await ask_name(message, state)

# –û—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é –∞–Ω–∫–µ—Ç—É
@dp.message(lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def keep_profile(message: Message):
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!", reply_markup=ReplyKeyboardRemove())

# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
async def ask_name(message: types.Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    
    if user_data and user_data.get("name") and user_data["name"] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
        name = user_data["name"]
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=name)]],
            resize_keyboard=True
        )
        await message.answer("üìù –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=keyboard)
    else:
        await message.answer("üìù –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(ProfileForm.name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É)
@dp.message(ProfileForm.name)
async def validate_name(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.delete()
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(name=message.text)
    user_data = await state.get_data()
    
    save_user_data(
        message.from_user.id, 
        age=user_data.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), 
        name=message.text, 
        city=user_data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    )

    await ask_age(message, state)

# –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
async def ask_age(message: types.Message, state: FSMContext):
    user_data = get_user_data(message.from_user.id)
    
    if user_data and user_data.get("age") and user_data["age"] != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":  
        age = user_data["age"]
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(age))]], 
            resize_keyboard=True
        )
        await message.answer("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=keyboard)
    else:
        await message.answer("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(ProfileForm.age)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(ProfileForm.age)
async def validate_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.delete()
        await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(age=message.text)
    user_data = await state.get_data()
    
    save_user_data(
        message.from_user.id, 
        age=message.text, 
        name=user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), 
        city=user_data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    )

    await ask_city(message, state)

# –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
async def ask_city(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    previous_city = user_data.get('city')

    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —ç—Ç–∏–º –≥–æ—Ä–æ–¥–æ–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π "–ú–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
    if previous_city:
        keyboard_buttons = [
            [KeyboardButton(text=f"üèôÔ∏è {previous_city}")],
            [KeyboardButton(text="üìç –ú–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", request_location=True)]
        ]
    else:
        keyboard_buttons = [[KeyboardButton(text="üìç –ú–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", request_location=True)]]

    await message.answer("üèôÔ∏è –ì–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True))
    await state.set_state(ProfileForm.city)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞
async def fetch_coordinates(apikey, address):
    base_url = "https://geocode-maps.yandex.ru/1.x"
    try:
        response = requests.get(base_url, params={
            "geocode": address,
            "apikey": apikey,
            "format": "json",
        })
        response.raise_for_status()
        found_places = response.json()['response']['GeoObjectCollection']['featureMember']

        if not found_places:
            return None

        most_relevant = found_places[0]
        lon, lat = most_relevant['GeoObject']['Point']['pos'].split(" ")
        return lon, lat
    except (requests.exceptions.RequestException, KeyError, TypeError):
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def fetch_location_name(apikey, lat, lon):
    base_url = "https://geocode-maps.yandex.ru/1.x"
    try:
        response = requests.get(base_url, params={
            "geocode": f"{lon},{lat}",
            "apikey": apikey,
            "format": "json",
        })
        response.raise_for_status()
        found_places = response.json()['response']['GeoObjectCollection']['featureMember']

        if not found_places:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"

        most_relevant = found_places[0]
        return most_relevant['GeoObject']['name']
    except (requests.exceptions.RequestException, KeyError, TypeError):
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å –õ–æ–∫–∞—Ç–æ—Ä–æ–º
async def get_city_from_yandex_locator():
    api_key = 'YOUR_YANDEX_API_KEY'
    url = "https://locator.api.maps.yandex.ru/v1/locate?apikey=" + api_key
    data = {"ip": [{"address": "auto"}]}
    try:
        response = requests.post(url, json=data)
        response.raise_for_status()
        result = response.json()
        return result.get('position', {}).get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞') + ", " + result.get('position', {}).get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
    except (requests.exceptions.RequestException, KeyError, TypeError, requests.exceptions.JSONDecodeError):
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"

@dp.message(lambda message: message.content_type == ContentType.LOCATION)
async def handle_location(message: Message, state: FSMContext):
    api_key = 'YOUR_YANDEX_API_KEY'
    lat, lon = message.location.latitude, message.location.longitude
    location_name = await fetch_location_name(api_key, lat, lon)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    previous_city = user_data.get('city')
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –≤–≤–æ–¥–∏–ª –≥–æ—Ä–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —ç—Ç–∏–º –≥–æ—Ä–æ–¥–æ–º
    if previous_city and previous_city == location_name:
        keyboard_buttons = [[KeyboardButton(text=f"üèôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {location_name}")]]
        await message.answer(f"üèôÔ∏è –¢–≤–æ—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å: {location_name}", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True))
    else:
        await message.answer(f"üèôÔ∏è –¢–≤–æ—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å: {location_name}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(city=location_name)
    await state.set_state(ProfileForm.city)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(lambda message: message.text and message.text != "üìç –ú–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
async def handle_manual_city_input(message: Message, state: FSMContext):
    user_city = message.text.strip()
    await state.update_data(city=user_city)
    await state.set_state(ProfileForm.city)

# –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç
known_locations = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]

# Description query handler
async def ask_description(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=get_skip_keyboard())
    await state.set_state(ProfileForm.description)

# Photos query handler
async def ask_photos(message: types.Message, state: FSMContext):
    desc = message.text if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else ""
    await state.update_data(description=desc)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=get_skip_keyboard())
    await state.set_state(ProfileForm.photos)

# Collect photos handler
async def collect_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])

    if message.photo:
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)
    elif message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await finish_profile(message, state)
        return
    
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=get_skip_keyboard())
    await state.set_state(ProfileForm.photos)

# Final profile handler
async def finish_profile(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = f"{data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}, {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    
    if data.get("description"):
        profile_text += f" - {data['description']}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if data.get("photos"):
        media = [InputMediaPhoto(photo, caption=profile_text if i == 0 else None) for i, photo in enumerate(data["photos"])]
        await message.answer_media_group(media)
    else:
        await message.answer(profile_text)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# Main function that starts the bot
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
